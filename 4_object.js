// пробежать по ключам обьекта 
let test = {
    roma: 1,
    olya: 2,
}
for ( let key in test){
    console.log(key);
}
// проверить наличие ключа в обьекте
// `key` in test

//object.hasOwnProperty(`key`) -- тоже проверить на наличие ключа в обьекте

//добавить ключ из переменной {[key]: `roma}

//JSON.stringify(обьект) -- переделает обьект в строку не работает с undefined
//JSON.parse(строка) -- переделает строку в обьект не работает с undefined

// получить массив ключей Object.keys(object
// получить массив значений Object.values(object)
// получить массив ключей и значений Object.entries(object)

// Object.assign(куда копируем, что копируем) -- копирование обьектов
const test2 = Object.assign({},test);
// test?.roma -- ?. опциональная проверка на наличие ключа обьекта

// this -- используется для получение значения из обьекта в котором лежит метод
// bind() -- задает контекст который привязан к функции можно так же передавать параметры
// call() -- тоже самое что bind() только сразу вызывает функцию
// apply() -- задает контекст для this и принимает параметры в массиве





//К любому обьекту можно добавить свой прототип в который будет записана моя функция, которую я могу вызвать через .

